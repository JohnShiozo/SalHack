package me.ionar.salhack.module.exploit;

import me.ionar.salhack.module.Module;
import me.ionar.salhack.module.Value;
import me.ionar.salhack.*;
import me.ionar.salhack.events.player.EventPlayerWalkingUpdate;

import net.minecraft.util.math.*;
import net.minecraft.network.*;
import net.minecraft.network.play.client.*;
import net.minecraft.entity.*;

import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;

public final class EntityDesync3Module extends Module
{
    public final Value<Integer> Ticks;
    private Entity Riding;
    
    public EntityDesync3Module() {
        super("EntityDesync3", new String[] { "EntityDesync3" }, "Clientside dismount from entity", "NONE", -1, ModuleType.EXPLOIT);
        this.Ticks = new Value<Integer>("Tick", new String[] { "Ticks" }, "How many packets to send per tick", 1, 0, 10, 1);
        this.Riding = null;
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
        if (this.mc.player == null) {
            this.Riding = null;
            this.toggle();
            return;
        }
        if (!this.mc.player.isRiding()) {
            SalHack.INSTANCE.logChat("You are not riding an entity.");
            this.Riding = null;
            this.toggle();
            return;
        }
        this.Riding = this.mc.player.getRidingEntity();
        this.mc.player.dismountRidingEntity();
        this.mc.world.removeEntity(this.Riding);
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        if (this.Riding != null) {
            this.Riding.isDead = false;
            this.mc.world.spawnEntity(this.Riding);
            this.mc.player.startRiding(this.Riding, true);
            SalHack.INSTANCE.logChat("Forced a remount.");
            return;
        }
        this.Riding = null;
    }
    
    @EventHandler
    private Listener<EventPlayerWalkingUpdate> OnUpdate PacketEvent = new Listener<>(p_Event -> {
        if (this.Riding == null) {
            return;
        }
        p_Event.setCanceled(true);
        if (this.mc.world.isBlockLoaded(new BlockPos(this.mc.player.posX, 0.0, this.mc.player.posZ))) {
            this.Riding.setPosition(this.mc.player.posX, this.mc.player.posY, this.mc.player.posZ);
            this.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Rotation(this.mc.player.rotationYaw, this.mc.player.rotationPitch, this.mc.player.onGround));
            this.mc.player.connection.sendPacket((Packet)new CPacketInput(this.mc.player.moveStrafing, this.mc.player.moveForward, this.mc.player.movementInput.jump, this.mc.player.movementInput.sneak));
            this.mc.player.connection.sendPacket((Packet)new CPacketVehicleMove(this.Riding));
        }
    }
}